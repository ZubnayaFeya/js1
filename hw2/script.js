//1. Дан код:
var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2  потому что сначала происходит увеличение переменной на 1, а потом присвоение.
d = b++; alert(d);           // 1  потому что значала происходит присвоение а потом увеличение переменной на единицу.
c = (2+ ++a); alert(c);      // 5  потому что переменная а уже была увеличена в первом действии, увеличена сейчас и к этому прибавили 2.
d = (2+ b++); alert(d);      // 4  потому что переменная b была увеличена во втором дейсмтвии и стала равна 2, сейчас к ней прибавили 2 и сохранили это в переменную после чего переменная b увеличелась ещё на 1 но в текущий результат это не попало.
alert(a);                    // 3  потому что инкременты и дикременты изменяют значение исходной переменной и все инкременты использованные выше повлияли на переменную
alert(b);                    // 3  потому что инкременты и дикременты изменяют значение исходной переменной и все инкременты использованные выше повлияли на переменную
//Почему код даёт именно такие результаты?


//2. Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + (a *= 2);  // 5


//3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
//если a и b положительные, вывести их разность;
//если а и b отрицательные, вывести их произведение;
//если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом.
var a = 5
var b = 3

function mat(x, y) {
    if (x > 0 && y > 0) {
        return x - y
    } else if (x < 0 && y < 0) {
        return x * y
    } else if ((x >= 0 && y < 0) || (x < 0 && y >= 0)) {
        return x + y
    }
} // если условие что 0 это положительное значение подходит для всех условий, то конечно знак равенства будет не > а >=


//4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15.
var a = 3
switch (a) {
    case 0:
        alert(a);
        a++;
    case 1:
        alert(a);
        a++;
    case 2:
        alert(a);
        a++;
    case 3:
        alert(a);
        a++;
    case 4:
        alert(a);
        a++;
    case 5:
        alert(a);
        a++;
    case 6:
        alert(a);
        a++;
    case 7:
        alert(a);
        a++;
    case 8:
        alert(a);
        a++;
    case 9:
        alert(a);
        a++;
    case 10:
        alert(a);
        a++;
    case 11:
        alert(a);
        a++;
    case 12:
        alert(a);
        a++;
    case 13:
        alert(a);
        a++;
    case 14:
        alert(a);
        a++;
    case 15:
        alert(a);
        a++;
        break;
}


//5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.
function summare(a, b) {
    return a + b
}

function difference(a, b) {
    return a - b
}

function multiplication(a, b) {
    return a * b
}

function division(a, b) {
    return a / b
}


//6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, operation – строка с названием операции. 
//В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 3) и вернуть полученное значение (использовать switch).
function mathOperation(arg1, arg2, operation) {
    switch (operation) {
        case '+':
            summare(arg1, arg2);
        case '-':
            difference(arg1, arg2);
        case ':':
            division(arg1, arg2);
        case '/':
            division(arg1, arg2);
        case '*':
            multiplication(arg1, arg2)
    }
}

//7. *Сравнить null и 0. Попробуйте объяснить результат.
// null это пустое значение, 0 это значения типа интеджер


//8. *С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень.
function power(val, pow) {
    if (pow > 2) {
        return val * power(val, pow - 1);
    } else {
        return val * val 
    }
}
